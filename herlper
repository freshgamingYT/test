import RPi.GPIO as GPIO
import time
import json

from logger import setup_logger
from fileHandler import FileHandler

class StetterInit:
    nullPos = 0
    maxPos = 0
    aktuellePos = 0

    # Pin configuration
    STEP = 17
    DIR = 27
    EN = 23
    schalterLinksPin = 16
    schalterRechtsPin = 24

    # Timing and delay
    us_delay = 950
    uS = 0.000001  # 0.00001 normal

    def __init__(self):
        self.logger = setup_logger()
        self.logger.debug("logger initialized")
        self.GPIOConfig()
        self.positionsFileHandler = FileHandler('./json/positions.json')
        self.positions = self.positionsFileHandler.readJson()

    def GPIOConfig(self):
        # GPIO setup
        GPIO.setmode(GPIO.BCM)
        GPIO.setwarnings(False)

        GPIO.setup(self.STEP, GPIO.OUT)
        GPIO.setup(self.DIR, GPIO.OUT)
        GPIO.setup(self.EN, GPIO.OUT)

        GPIO.setup(self.schalterLinksPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.setup(self.schalterRechtsPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.output(self.EN, GPIO.LOW)
        
        self.logger.info("Setup GPIO")


    def initMoveMotor(self, direction, stop_condition):  # stop_condition is reference to getSchalterStatus
        """Move the motor in the specified direction until the stop condition is met."""
        self.logger.debug("In initMoveMotor")

        GPIO.output(self.DIR, direction)
        while not stop_condition():
            GPIO.output(self.STEP, GPIO.HIGH)
            time.sleep(self.uS * self.us_delay)
            GPIO.output(self.STEP, GPIO.LOW)
            time.sleep(self.uS * self.us_delay)

            self.logger.info("moved Motor 1 Step")

            if direction == GPIO.HIGH:
                self.aktuellePos += 1
            else:
                self.aktuellePos -= 1

            self.logger.info(f"new aktuellePos is {self.aktuellePos}")

    def getSchalterRechtsStatus(self) -> bool:
        """Check the status of the right limit switch."""
        self.logger.info(f"status of right button {GPIO.input(self.schalterRechtsPin)}")
        return GPIO.input(self.schalterRechtsPin) == 1

    def getSchalterLinksStatus(self) -> bool:
        """Check the status of the left limit switch."""
        self.logger.info(f"status of right button {GPIO.input(self.schalterLinksPin)}")
        return GPIO.input(self.schalterLinksPin) == 1

    def init(self):
        """Execute the exact sequence: left ? right ? left."""
        self.logger.info("Step 1: Moving left...")
        self.initMoveMotor(GPIO.LOW, self.getSchalterLinksStatus)  # Move left until left button is pressed
        self.nullPos = 0
        self.logger.info(f"Left limit switch reached!, nullPos: {self.nullPos} ")
        time.sleep(1)

        self.logger.info("Step 2: Moving right...")
        self.initMoveMotor(GPIO.HIGH, self.getSchalterRechtsStatus)  # Move right until right button is pressed
        self.maxPos = self.aktuellePos 
        self.logger.info(f"Right limit switch reached!, maxPos: {self.maxPos}, aktuellePos: {self.aktuellePos}")
        time.sleep(1)

        self.logger.info("Step 3: Moving left again...")
        self.initMoveMotor(GPIO.LOW, self.getSchalterLinksStatus)  # Move left until left button is pressed
        self.aktuellePos = 0
        self.logger.info(f"Left limit switch reached again!, aktuellePos: {self.aktuellePos}")
        time.sleep(1)

        # Print available positions
        print("Available Positions:")
        for position_name, steps in self.positions.items():
            print(f"- {position_name}: {steps} steps")

        while 1:
            try:
                user_input = input("Enter position name or 'q' to quit: ")
                if user_input.lower() == 'q':
                    break

                if user_input in self.positions:
                    target_steps = self.positions[user_input]
                    self.move_to_position(target_steps)
                else:
                    print(f"Invalid position: {user_input}")

            except KeyboardInterrupt:
                print("Exiting program...")
                break

            if (self.aktuellePos < 0) or (self.aktuellePos > self.maxPos):
                print("Limit switch triggered! Stopping motor.")
                break 

    def move_to_position(self, target_steps):
        """Moves the motor to the specified position."""
        relative_steps = target_steps - self.aktuellePos
        self.moveRelPos(relative_steps, self.aktuellePos)  # Pass aktuellePos to moveRelPos
        self.aktuellePos = target_steps

    def moveRelPos(self, relative_steps, aktuellePos):
        """Moves the motor by the specified relative number of steps."""
        direction = GPIO.HIGH if relative_steps > 0 else GPIO.LOW
        absolute_steps = abs(relative_steps)

        GPIO.output(self.DIR, direction)
        for _ in range(absolute_steps):
            GPIO.output(self.STEP, GPIO.HIGH)
            time.sleep(self.uS * self.us_delay)
            GPIO.output(self.STEP, GPIO.LOW)
            time.sleep(self.uS * self.us_delay)

            if direction == GPIO.HIGH:
                aktuellePos += 1
            else:
                aktuellePos -= 1

            if (aktuellePos < 0) or (aktuellePos > self.maxPos):
                print("Limit switch triggered! Stopping motor.")
                break

        self.aktuellePos = aktuellePos 

if __name__ == "__main__":
    try:
        stepper = StetterInit()
        stepper.init()
        
    except KeyboardInterrupt:
        print("Exiting program...")
    finally:
        GPIO.cleanup()
